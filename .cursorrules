# Cursor Rules for Jovie Project

This file provides guidelines for Cursor and other AI coding tools when working with this repository.

## Project Overview

Jovie is a Next.js 14 application with Clerk authentication and Supabase database integration. The project uses the latest native Clerk-Supabase integration method.

## Technology Stack

- **Frontend**: Next.js 14 (App Router)
- **Database**: Supabase (PostgreSQL with RLS)
- **Authentication**: Clerk with native Supabase integration
- **Styling**: Tailwind CSS
- **Testing**: Vitest + Playwright
- **Deployment**: Vercel

## Critical Guidelines

### 1. Clerk-Supabase Integration

**ALWAYS use the native integration method:**

```typescript
// ✅ CORRECT: Use native integration
import { useSession } from '@clerk/nextjs';
import { createClient } from '@supabase/supabase-js';

function createClerkSupabaseClient() {
  const { session } = useSession();

  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_KEY!,
    {
      async accessToken() {
        return session?.getToken() ?? null;
      },
    }
  );
}
```

**NEVER use JWT templates (deprecated):**

```typescript
// ❌ DO NOT use JWT templates
const token = await getToken({ template: 'supabase' });
```

### 2. RLS Policies

**ALWAYS use auth.jwt() for user identification:**

```sql
-- ✅ CORRECT: Use auth.jwt() for RLS
create policy "User can view own data" on "users"
for select to authenticated using (
  auth.jwt()->>'sub' = user_id
);
```

### 3. Component Patterns

**Use the established patterns:**

```typescript
// ✅ CORRECT: Client component with Clerk integration
'use client';
import { useSession } from '@clerk/nextjs';
import { createClient } from '@supabase/supabase-js';

export function MyComponent() {
  const { session } = useSession();

  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_KEY!,
    {
      async accessToken() {
        return session?.getToken() ?? null;
      },
    }
  );

  // Component logic here
}
```

### 4. Error Handling

**Always handle errors gracefully:**

```typescript
const { data, error } = await supabase.from('table').select('*');

if (error) {
  console.error('Database error:', error);
  // Handle error appropriately
  return;
}
```

### 5. TypeScript

**Use proper typing:**

```typescript
interface User {
  id: string;
  clerk_id: string;
  email: string;
  created_at: string;
}

const { data: users, error } = await supabase
  .from('users')
  .select('*')
  .returns<User[]>();
```

## File Structure

- `app/` - Next.js App Router pages and layouts
- `components/` - Reusable React components
- `lib/` - Utility functions and configurations
- `supabase/` - Database migrations and functions
- `types/` - TypeScript type definitions
- `tests/` - Test files

## Environment Variables

Required environment variables:

```bash
# Clerk
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...
CLERK_SECRET_KEY=sk_test_...

# Supabase
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_KEY=your-anon-key

# Spotify
SPOTIFY_CLIENT_ID=your-spotify-client-id
SPOTIFY_CLIENT_SECRET=your-spotify-client-secret
```

## Database Schema

Key tables:

- `users` - User accounts (Clerk ID mapping)
- `artists` - Artist profiles
- `social_links` - Social media links
- `releases` - Music releases
- `click_events` - Analytics data

## Testing Guidelines

1. **Unit Tests**: Use Vitest for component testing
2. **E2E Tests**: Use Playwright for end-to-end testing
3. **Database Tests**: Test RLS policies with multiple users
4. **Authentication Tests**: Verify Clerk integration works correctly

## Code Style

- Use TypeScript for all new code
- Follow existing component patterns
- Use Tailwind CSS for styling
- Prefer functional components with hooks
- Use proper error boundaries and loading states

## Security Guidelines

1. **Always enable RLS** on user data tables
2. **Use auth.jwt()** for user identification in policies
3. **Validate user permissions** before database operations
4. **Never expose sensitive data** in client-side code
5. **Use environment variables** for all secrets

## Migration Guidelines

When updating Clerk-Supabase integration:

1. **Remove JWT templates** from Clerk dashboard
2. **Update client configuration** to use `accessToken()`
3. **Update RLS policies** to use `auth.jwt()->>'sub'`
4. **Test thoroughly** with existing data
5. **Verify data isolation** between users

## Common Patterns

### Form Handling

```typescript
const [loading, setLoading] = useState(false);
const [error, setError] = useState<string | undefined>();

const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  setLoading(true);
  setError(undefined);

  try {
    const supabase = createClerkSupabaseClient();
    const { error } = await supabase.from('table').insert(data);

    if (error) throw error;
    // Handle success
  } catch (error) {
    setError('Failed to save data');
  } finally {
    setLoading(false);
  }
};
```

### Data Fetching

```typescript
const [data, setData] = useState<User[]>([]);
const [loading, setLoading] = useState(true);

useEffect(() => {
  const fetchData = async () => {
    try {
      const supabase = createClerkSupabaseClient();
      const { data, error } = await supabase.from('users').select('*');

      if (error) throw error;
      setData(data || []);
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  fetchData();
}, []);
```

## Resources

- [Clerk Supabase Integration](https://clerk.com/docs/raw/integrations/databases/supabase.mdx)
- [Supabase RLS Documentation](https://supabase.com/docs/guides/auth/row-level-security)
- [Next.js App Router](https://nextjs.org/docs/app)
- [Tailwind CSS](https://tailwindcss.com/docs)

## AI Tool Verification

Before suggesting code changes, verify:

1. ✅ Uses native Clerk-Supabase integration
2. ✅ Implements proper RLS policies
3. ✅ Handles errors gracefully
4. ✅ Uses TypeScript types
5. ✅ Follows existing patterns
6. ✅ Maintains security best practices
