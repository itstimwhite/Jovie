# Cursor Rules for Jovie Project

## ‚ö†Ô∏è CRITICAL: BRANCH PROTECTION RULES

### **NEVER PUSH TO PREVIEW OR MAIN**
- **ONLY push to `develop` branch**
- **NEVER push directly to `preview` or `main` branches**
- The CI/CD pipeline handles all promotions automatically
- If pipeline is stuck, fix issues on `develop` and let CI handle the rest
- Direct pushes to protected branches will be rejected and can break the pipeline

### **Branch Protection**
- `preview` and `main` are protected branches
- All changes must go through the CI/CD pipeline
- Auto-promote workflows handle `develop ‚Üí preview ‚Üí main` progression
- Manual intervention should only be done on `develop` branch

### **BRANCH PROTECTION ENFORCEMENT**

**üö® CRITICAL: NEVER ALLOW DIRECT CHANGES TO PROTECTED BRANCHES**

**Protected Branches:**
- `preview` - Only auto-promotion from `develop` allowed
- `main` - Only auto-promotion from `preview` allowed

**Branch Flow (ENFORCE THIS):**
```
develop ‚Üí [auto-promote] ‚Üí preview ‚Üí [auto-promote] ‚Üí main
```

**NEVER ALLOW:**
- ‚ùå Direct commits to `preview` or `main`
- ‚ùå Manual merges to protected branches
- ‚ùå Direct pushes to protected branches
- ‚ùå Manual PRs to protected branches (except auto-promote PRs)

**ONLY ALLOW:**
- ‚úÖ Auto-promotion PRs from CI/CD pipeline
- ‚úÖ Emergency fixes through `develop` branch only
- ‚úÖ Manual intervention only on `develop` branch

**If Protected Branch Issues Occur:**
1. **NEVER fix directly on protected branch**
2. **ALWAYS create fix on `develop` branch**
3. **Let CI/CD auto-promote the fix**
4. **If auto-promotion fails, reset protected branch to match source**

**Emergency Reset Process:**
- Create PR to reset protected branch to exact match of source
- Use squash merge to maintain clean history
- Ensure auto-promotion workflow resumes correctly

## Project Overview

Jovie is a Next.js 14 application with Clerk authentication and Supabase database integration. The project uses the latest native Clerk-Supabase integration method and Statsig for feature flags.

## Technology Stack

- **Frontend**: Next.js 14 (App Router)
- **Database**: Supabase (PostgreSQL with RLS)
- **Authentication**: Clerk with native Supabase integration
- **Feature Flags**: Statsig for experimentation and feature management
- **Styling**: Tailwind CSS
- **Testing**: Vitest + Playwright
- **Deployment**: Vercel

## Critical Guidelines

### 1. Feature Flags with Statsig

**ALWAYS use Statsig for feature flags:**

```typescript
// ‚úÖ CORRECT: Use Statsig hooks for feature flags
import { useFeatureFlags } from '@/lib/feature-flags';

export function MyComponent() {
  const { waitlistEnabled, debugBannerEnabled } = useFeatureFlags();
  
  return (
    <div>
      {waitlistEnabled && <WaitlistComponent />}
      {debugBannerEnabled && <DebugBanner />}
    </div>
  );
}
```

**Available feature flags:**
- `waitlistEnabled` - Controls waitlist functionality
- `debugBannerEnabled` - Controls debug banner visibility
- `artistSearchEnabled` - Controls artist search functionality
- `tipPromoEnabled` - Controls tip promotion features

### 2. Clerk-Supabase Integration

**ALWAYS use the native integration method:**

```typescript
// ‚úÖ CORRECT: Use native integration
import { useSession } from '@clerk/nextjs';
import { createClient } from '@supabase/supabase-js';

function createClerkSupabaseClient() {
  const { session } = useSession();

  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_KEY!,
    {
      async accessToken() {
        return session?.getToken() ?? null;
      },
    }
  );
}
```

**NEVER use JWT templates (deprecated):**

```typescript
// ‚ùå DO NOT use JWT templates
const token = await getToken({ template: 'supabase' });
```

### 3. RLS Policies

**ALWAYS use auth.jwt() for user identification:**

```sql
-- ‚úÖ CORRECT: Use auth.jwt() for RLS
create policy "User can view own data" on "users"
for select to authenticated using (
  auth.jwt()->>'sub' = user_id
);
```

### 4. Component Patterns

**Use the established patterns:**

```typescript
// ‚úÖ CORRECT: Client component with Clerk integration
'use client';
import { useSession } from '@clerk/nextjs';
import { createClient } from '@supabase/supabase-js';

export function MyComponent() {
  const { session } = useSession();

  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_KEY!,
    {
      async accessToken() {
        return session?.getToken() ?? null;
      },
    }
  );

  // Component logic here
}
```

### 5. Error Handling

**Always handle errors gracefully:**

```typescript
const { data, error } = await supabase.from('table').select('*');

if (error) {
  console.error('Database error:', error);
  // Handle error appropriately
  return;
}
```

### 6. TypeScript

**Use proper typing:**

```typescript
interface User {
  id: string;
  clerk_id: string;
  email: string;
  created_at: string;
}

const { data: users, error } = await supabase
  .from('users')
  .select('*')
  .returns<User[]>();
```

## File Structure

- `app/` - Next.js App Router pages and layouts
- `components/` - Reusable React components
- `lib/` - Utility functions and configurations
- `supabase/` - Database migrations and functions
- `types/` - TypeScript type definitions
- `tests/` - Test files

## Environment Variables

Required environment variables:

```bash
# Clerk
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...
CLERK_SECRET_KEY=sk_test_...

# Supabase
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_KEY=your-anon-key

# Statsig
NEXT_PUBLIC_STATSIG_CLIENT_KEY=client-<your-statsig-client-key>

# Spotify
SPOTIFY_CLIENT_ID=your-spotify-client-id
SPOTIFY_CLIENT_SECRET=your-spotify-client-secret
```

## Database Schema

Key tables:

- `users` - User accounts (Clerk ID mapping)
- `artists` - Artist profiles
- `social_links` - Social media links
- `releases` - Music releases
- `click_events` - Analytics data

## Testing Guidelines

1. **Unit Tests**: Use Vitest for component testing
2. **E2E Tests**: Use Playwright for end-to-end testing
3. **Database Tests**: Test RLS policies with multiple users
4. **Authentication Tests**: Verify Clerk integration works correctly
5. **Feature Flag Tests**: Test components with different flag states

## Code Style

- Use TypeScript for all new code
- Follow existing component patterns
- Use Tailwind CSS for styling
- Prefer functional components with hooks
- Use proper error boundaries and loading states

## Security Guidelines

1. **Always enable RLS** on user data tables
2. **Use auth.jwt()** for user identification in policies
3. **Validate user permissions** before database operations
4. **Never expose sensitive data** in client-side code
5. **Use environment variables** for all secrets

## Migration Guidelines

When updating Clerk-Supabase integration:

1. **Remove JWT templates** from Clerk dashboard
2. **Update client configuration** to use `accessToken()`
3. **Update RLS policies** to use `auth.jwt()->>'sub'`
4. **Test thoroughly** with existing data
5. **Verify data isolation** between users

## Common Patterns

### Feature Flag Usage

```typescript
import { useFeatureFlags } from '@/lib/feature-flags';

export function MyComponent() {
  const { waitlistEnabled, debugBannerEnabled } = useFeatureFlags();
  
  return (
    <div>
      {waitlistEnabled && <WaitlistComponent />}
      {debugBannerEnabled && <DebugBanner />}
    </div>
  );
}
```

### Form Handling

```typescript
const [loading, setLoading] = useState(false);
const [error, setError] = useState<string | undefined>();

const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  setLoading(true);
  setError(undefined);

  try {
    const supabase = createClerkSupabaseClient();
    const { error } = await supabase.from('table').insert(data);

    if (error) throw error;
    // Handle success
  } catch (error) {
    setError('Failed to save data');
  } finally {
    setLoading(false);
  }
};
```

### Data Fetching

```typescript
const [data, setData] = useState<User[]>([]);
const [loading, setLoading] = useState(true);

useEffect(() => {
  const fetchData = async () => {
    try {
      const supabase = createClerkSupabaseClient();
      const { data, error } = await supabase.from('users').select('*');

      if (error) throw error;
      setData(data || []);
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  fetchData();
}, []);
```

## Resources

- [Clerk Supabase Integration](https://clerk.com/docs/raw/integrations/databases/supabase.mdx)
- [Supabase RLS Documentation](https://supabase.com/docs/guides/auth/row-level-security)
- [Statsig Documentation](https://docs.statsig.com/)
- [Next.js App Router](https://nextjs.org/docs/app)
- [Tailwind CSS](https://tailwindcss.com/docs)

## AI Tool Verification

Before suggesting code changes, verify:

1. ‚úÖ Uses native Clerk-Supabase integration
2. ‚úÖ Uses Statsig for feature flags
3. ‚úÖ Implements proper RLS policies
4. ‚úÖ Handles errors gracefully
5. ‚úÖ Uses TypeScript types
6. ‚úÖ Follows existing patterns
7. ‚úÖ Maintains security best practices

### **Branch Protection Verification**

**BEFORE suggesting any git operations, verify:**

1. ‚úÖ **NEVER suggest direct pushes to `preview` or `main`**
2. ‚úÖ **NEVER suggest manual merges to protected branches**
3. ‚úÖ **ALWAYS suggest changes go through `develop` branch first**
4. ‚úÖ **If protected branch issues exist, suggest reset PRs only**
5. ‚úÖ **Verify auto-promotion workflow is working correctly**
6. ‚úÖ **Ensure branch protection rules are enforced**

**If user asks to merge/push to protected branch:**
- ‚ùå **REJECT the request**
- ‚úÖ **Suggest using `develop` branch instead**
- ‚úÖ **Explain the proper branch flow**
- ‚úÖ **Offer to help with the correct approach**
