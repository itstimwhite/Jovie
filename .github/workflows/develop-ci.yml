name: Develop CI/CD Pipeline

on:
  push:
    branches: [develop]

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20.17
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck --if-present

      - name: Lint
        run: npm run lint --if-present

      - name: Test
        run: npm run test:ci

      - name: Build
        run: npm run build

  security-audit:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20.17
          cache: 'npm'

      - run: npm ci

      - name: Dependency security audit
        run: npx audit-ci --high --allowlist "npm:*"

  deploy:
    needs: [build, security-audit]
    runs-on: ubuntu-latest
    environment: preview
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_PRICE_PRO: ${{ secrets.STRIPE_PRICE_PRO }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20.17
          cache: 'npm'

      - run: npm ci

      - name: Vercel pull preview env
        run: npx vercel pull --environment=preview --yes --token "$VERCEL_TOKEN"

      - name: Vercel build
        run: npx vercel build --token "$VERCEL_TOKEN"

      - name: Vercel deploy (preview)
        id: vercel
        run: |
          URL=$(npx vercel deploy --prebuilt --token "$VERCEL_TOKEN")
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Upload Vercel output
        uses: actions/upload-artifact@v4
        with:
          name: vercel-output
          path: .vercel/output
          retention-days: 1

      # - name: E2E Tests (smoke)
      #   if: ${{ steps.vercel.outputs.url }}
      #   run: |
      #     npx playwright install --with-deps
      #     BASE_URL="${{ steps.vercel.outputs.url }}" npm run e2e:smoke --if-present

  promote:
    needs: [build, security-audit]
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if develop is ahead of preview
        id: check-ahead
        run: |
          git fetch origin preview
          echo "Preview branch commit: $(git rev-parse origin/preview)"
          echo "Develop branch commit: $(git rev-parse develop)"
          echo "Commits ahead: $(git rev-list --count origin/preview..develop)"
          echo "Commits behind: $(git rev-list --count develop..origin/preview)"
          if [ "$(git rev-list --count origin/preview..develop)" -gt 0 ]; then
            echo "develop_ahead=true" >> $GITHUB_OUTPUT
            echo "✅ Develop is ahead of preview, proceeding with promotion"
          else
            echo "develop_ahead=false" >> $GITHUB_OUTPUT
            echo "⚠️ Develop is not ahead of preview, skipping promotion"
          fi

      - name: Create or update PR develop → preview
        if: steps.check-ahead.outputs.develop_ahead == 'true'
        id: create_pr
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Check if PR already exists
          EXISTING_PR=$(gh pr list --head auto-promote/preview --base preview --json number --jq '.[0].number // empty')

          if [ -n "$EXISTING_PR" ]; then
            echo "PR #$EXISTING_PR already exists, updating branch..."
            # Update the existing branch
            git fetch origin auto-promote/preview || true
            git checkout -B auto-promote/preview origin/preview
            git reset --hard develop
            git push origin auto-promote/preview --force-with-lease
            echo "existing_pr=$EXISTING_PR" >> $GITHUB_OUTPUT
          else
            echo "No existing PR found, creating new one..."
            # Create promotion branch from develop
            git checkout -B auto-promote/preview develop
            
            # Push the branch
            git push origin auto-promote/preview
            
            # Create PR using GitHub CLI
            gh pr create \
              --title "Auto-promote: develop → preview" \
              --body "🤖 **Automated Promotion**

            This PR automatically promotes changes from \`develop\` to \`preview\`.

            **Changes included:**
            - Latest develop branch changes
            - All CI checks passed ✅
            - Security audit passed ✅
            - Ready for preview deployment

            **Auto-merge enabled** - This PR will be automatically merged when all checks pass." \
              --base preview \
              --head auto-promote/preview
            
            echo "PR created successfully"
          fi

      - name: Enable auto-merge (squash)
        if: steps.check-ahead.outputs.develop_ahead == 'true'
        run: |
          # Get the PR number (either from existing or newly created)
          if [ -n "${{ steps.create_pr.outputs.existing_pr }}" ]; then
            PR_NUMBER="${{ steps.create_pr.outputs.existing_pr }}"
            echo "Using existing PR #$PR_NUMBER"
          else
            PR_NUMBER=$(gh pr list --head auto-promote/preview --json number --jq '.[0].number')
            echo "Using newly created PR #$PR_NUMBER"
          fi

          echo "Enabling auto-merge for PR #$PR_NUMBER"

          # Enable auto-merge
          gh pr merge $PR_NUMBER --auto --squash

      - name: Skip promotion - no changes
        if: steps.check-ahead.outputs.develop_ahead == 'false'
        run: |
          echo "No changes to promote - develop is not ahead of preview"
          echo "This is expected if the develop branch was already merged to preview"
