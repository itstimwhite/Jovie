name: CI

on:
  pull_request:
    branches: [preview, main]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.vscode/**'
  push:
    branches: [preview, main]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pr-policy:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const base = context.payload.pull_request.base.ref;
            const head = context.payload.pull_request.head.ref;
            if (base === 'main' && head !== 'preview') {
              core.setFailed(`Only allow preview -> main. Got ${head} -> ${base}`);
            } else if (base === 'preview' && head === 'main') {
              core.setFailed(`Do not merge main -> preview. Use feature/* -> preview`);
            } else {
              core.info('PR policy OK');
            }

  up-to-date-with-preview:
    name: up-to-date-with-preview
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'preview' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Check branch is up-to-date with preview
        run: |
          git fetch origin preview
          if git merge-base --is-ancestor origin/preview HEAD; then
            echo "Up to date with preview"
          else
            echo "Branch is behind preview. Please merge/rebase preview into your branch."
            exit 1
          fi

  ci-fast:
    # Draft PRs skip; ready PRs + pushes run fast checks
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    runs-on: ubuntu-latest
    steps:
      - uses: fkirc/skip-duplicate-actions@v5
        with:
          cancel_others: 'true'
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: '**/package-lock.json'
      - name: Install
        run: npm ci
      - name: Typecheck
        id: typecheck
        run: npm run typecheck --if-present > typecheck-output.log || echo "Typecheck failed"
        continue-on-error: true
      - name: Format TypeScript errors for summary
        if: steps.typecheck.outcome == 'failure'
        run: |
          chmod +x .github/scripts/format-typescript-output.js
          node .github/scripts/format-typescript-output.js < typecheck-output.log > typescript-summary.md
          cat typescript-summary.md >> $GITHUB_STEP_SUMMARY
      - name: Upload TypeScript errors
        if: steps.typecheck.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: typescript-errors
          path: |
            typecheck-output.log
            typescript-summary.md
          retention-days: 7
      - name: Lint
        id: lint
        run: npm run lint --if-present > eslint-output.log || echo "Lint failed"
        continue-on-error: true
      - name: Format ESLint errors for summary
        if: steps.lint.outcome == 'failure'
        run: |
          chmod +x .github/scripts/format-eslint-output.js
          node .github/scripts/format-eslint-output.js < eslint-output.log > eslint-summary.md
          cat eslint-summary.md >> $GITHUB_STEP_SUMMARY
      - name: Upload ESLint errors
        if: steps.lint.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: eslint-errors
          path: |
            eslint-output.log
            eslint-summary.md
          retention-days: 7
      - name: Fail if checks failed
        if: steps.typecheck.outcome == 'failure' || steps.lint.outcome == 'failure'
        run: exit 1

  ci-full:
    name: Full CI (label or push)
    needs: [ci-fast]
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'full-ci')) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: '**/package-lock.json'
      - run: npm ci
      - name: Install Playwright
        if: ${{ hashFiles('tests/e2e/**') != '' || hashFiles('tests/smoke/**') != '' }}
        run: npx playwright install --with-deps
      - name: E2E smoke
        if: ${{ github.ref != 'refs/heads/main' && (hashFiles('tests/e2e/**') != '' || hashFiles('tests/smoke/**') != '') }}
        run: npm run e2e:smoke --if-present
        continue-on-error: true
      - run: npm test --if-present
      - run: npm run build --if-present

  deploy:
    needs: [ci-fast] # change to [ci-full] if you want build/tests first
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/preview' }}
    runs-on: ubuntu-latest
    environment:
      name: Preview
      url: https://preview.jov.ie
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Install Vercel CLI
        run: npm i -g vercel@latest
      - name: DB migrate (preview)
        run: npm run db:migrate
        env:
          GIT_BRANCH: preview
        continue-on-error: true
      - name: DB seed (preview)
        run: npm run db:seed
        env:
          GIT_BRANCH: preview
        continue-on-error: true
      - name: Pull env (preview)
        run: vercel pull --yes --environment=preview --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      - name: Build
        run: vercel build --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      - name: Deploy (prebuilt)
        run: vercel deploy --prebuilt --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  promote:
    needs: [deploy]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/preview' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - name: Create/Update PR preview → main (manual review required)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if PR already exists
          existing_pr=$(gh pr list --head preview --base main --json number --jq '.[0].number // empty')
          if [ -z "$existing_pr" ]; then
            echo "Creating new PR: preview → main"
            gh pr create --base main --head preview --title "Promote: preview → main" --body "Automated promotion PR (manual review required)"
          else
            echo "PR already exists: #$existing_pr (no auto-merge; manual review required)"
            gh pr edit "$existing_pr" --title "Promote: preview → main" --body "Automated promotion PR (manual review required)"
          fi

  deploy-prod:
    needs: [ci-fast]
    if: ${{ github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://jov.ie
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Vercel CLI
        run: npm i -g vercel@latest
      - name: DB migrate (main) — requires backup and ALLOW_PROD_MIGRATIONS=true
        run: npm run db:migrate
        env:
          GIT_BRANCH: main
        continue-on-error: false
      - name: Pull env (production)
        run: vercel pull --yes --environment=production --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      - name: Build (production)
        run: vercel build --prod --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      - name: Deploy (production, prebuilt)
        run: vercel deploy --prebuilt --prod --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
