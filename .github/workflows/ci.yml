name: CI

on:
  pull_request:
    branches: [develop, preview, main]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.vscode/**'
  push:
    branches: [develop, preview]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pr-policy:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const base = context.payload.pull_request.base.ref;
            const head = context.payload.pull_request.head.ref;
            if (base === 'preview' && head !== 'develop') {
              core.setFailed(`Only allow develop -> preview. Got ${head} -> ${base}`);
            } else if (base === 'main' && head !== 'preview') {
              core.setFailed(`Only allow preview -> main. Got ${head} -> ${base}`);
            } else {
              core.info('PR policy OK');
            }

  ci-fast:
    # Draft PRs skip; ready PRs + pushes run fast checks
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    runs-on: ubuntu-latest
    steps:
      - uses: fkirc/skip-duplicate-actions@v5
        with:
          cancel_others: 'true'
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: '**/package-lock.json'
      - name: Install
        run: npm ci
      - name: Typecheck
        run: npm run typecheck --if-present
      - name: Lint
        run: npm run lint --if-present

  ci-full:
    name: Full CI (label or push)
    needs: [ci-fast]
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'full-ci')) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: '**/package-lock.json'
      - run: npm ci
      - run: npm test --if-present
      - run: npm run build --if-present

  deploy:
    needs: [ci-fast] # change to [ci-full] if you want build/tests first
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/preview') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Install Vercel CLI
        run: npm i -g vercel@latest
      - name: Pull env (preview)
        run: vercel pull --yes --environment=preview --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      - name: Build
        run: vercel build --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      - name: Deploy (prebuilt)
        run: vercel deploy --prebuilt --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  promote:
    needs: [deploy]
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/preview') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }
      - name: Promote develop → preview
        if: ${{ github.ref == 'refs/heads/develop' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if PR already exists
          existing_pr=$(gh pr list --head develop --base preview --json number --jq '.[0].number // empty')
          if [ -z "$existing_pr" ]; then
            echo "Creating new PR: develop → preview"
            gh pr create --base preview --head develop --title "Auto-promote: develop → preview" --body "Automated promotion PR"
            existing_pr=$(gh pr list --head develop --base preview --json number --jq '.[0].number')
          else
            echo "PR already exists: #$existing_pr"
          fi
          echo "Enabling auto-merge for PR #$existing_pr"
          gh pr merge "$existing_pr" --squash --auto
      - name: Promote preview → main
        if: ${{ github.ref == 'refs/heads/preview' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if PR already exists
          existing_pr=$(gh pr list --head preview --base main --json number --jq '.[0].number // empty')
          if [ -z "$existing_pr" ]; then
            echo "Creating new PR: preview → main"
            gh pr create --base main --head preview --title "Auto-promote: preview → main" --body "Automated promotion PR"
            existing_pr=$(gh pr list --head preview --base main --json number --jq '.[0].number // empty')
          else
            echo "PR already exists: #$existing_pr"
          fi
          echo "Enabling auto-merge for PR #$existing_pr"
          gh pr merge "$existing_pr" --squash --auto
