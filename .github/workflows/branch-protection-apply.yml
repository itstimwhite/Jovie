name: Apply Branch Protection

on:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  apply:
    name: Apply protection to main & preview
    runs-on: ubuntu-latest
    steps:
      - name: Verify ADMIN_TOKEN is configured
        env:
          ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          if [ -z "$ADMIN_TOKEN" ]; then
            echo "Missing required secret: ADMIN_TOKEN. Create a fine-grained PAT with 'Administration' and 'Branch protection' write access, then add it as a repository secret named ADMIN_TOKEN." >&2
            exit 1
          fi
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            async function protect(branch, opts) {
              // Update branch protection
              await github.rest.repos.updateBranchProtection({
                owner,
                repo,
                branch,
                required_status_checks: {
                  strict: true,
                  contexts: opts.contexts,
                },
                enforce_admins: true,
                required_pull_request_reviews: opts.reviews,
                restrictions: null,
                required_linear_history: false,
                allow_force_pushes: false,
                allow_deletions: false,
                required_conversation_resolution: true,
              });

              // Require signed commits
              try {
                await github.rest.repos.createCommitSignatureProtection({ owner, repo, branch });
              } catch (e) {
                if (e.status !== 422) throw e; // already enabled
              }
            }

            // NOTE: GitHub uses "<workflow name> / <job id or name>" for check contexts
            // Our workflow is named "CI", so contexts should be prefixed with "CI / "

            // preview: 0 reviews, require checks (including 'up-to-date-with-preview')
            await protect('preview', {
              contexts: ['CI / pr-policy','CI / up-to-date-with-preview','CI / ci-fast'],
              reviews: {
                required_approving_review_count: 0,
                dismiss_stale_reviews: false,
                require_code_owner_reviews: false,
                require_last_push_approval: false,
              },
            });

            // main: 1 review, require checks (no up-to-date-with-preview)
            await protect('main', {
              contexts: ['CI / pr-policy','CI / ci-fast'],
              reviews: {
                required_approving_review_count: 1,
                dismiss_stale_reviews: true,
                require_code_owner_reviews: false,
                require_last_push_approval: true,
              },
            });
