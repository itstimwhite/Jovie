name: Release Loop (Main)

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

permissions:
  contents: read
  deployments: write
  security-events: write

jobs:
  premerge:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PREVIEW_NEXT_PUBLIC_SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PREVIEW_SUPABASE_SERVICE_ROLE_KEY }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.PREVIEW_NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.PREVIEW_CLERK_SECRET_KEY }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'npm' }
      - run: npm ci
      - run: npm run typecheck --if-present
      - run: npm run lint --if-present
      - run: npm run test --if-present -- --ci
      - run: npm run build

      - name: Vercel pull preview env
        run: npx vercel pull --environment=preview --yes --token "$VERCEL_TOKEN"

      - name: Vercel build
        run: npx vercel build --token "$VERCEL_TOKEN"

      - name: Vercel deploy (preview for PR)
        id: vercel
        run: |
          URL=$(npx vercel deploy --prebuilt --token "$VERCEL_TOKEN")
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Playwright E2E (full)
        run: |
          npx playwright install --with-deps
          BASE_URL="${{ steps.vercel.outputs.url }}" npm run e2e:full --if-present

      - name: Lighthouse + a11y
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: ${{ steps.vercel.outputs.url }}
          configPath: .lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: ZAP Baseline DAST
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ steps.vercel.outputs.url }}
          cmd_options: '-a'

      - name: Dependency security (high+)
        run: npx audit-ci --moderate --allowlist "npm:*" || npm audit --audit-level=high

  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: production
      url: ${{ steps.vercel.outputs.prod_url }}
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PROD_NEXT_PUBLIC_SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PROD_SUPABASE_SERVICE_ROLE_KEY }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.PROD_NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.PROD_CLERK_SECRET_KEY }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'npm' }
      - run: npm ci
      - run: npm run build

      - name: Vercel pull prod env
        run: npx vercel pull --environment=production --yes --token "$VERCEL_TOKEN"

      - name: Vercel build (prod)
        run: npx vercel build --prod --token "$VERCEL_TOKEN"

      - name: Vercel deploy (prod)
        id: vercel
        run: |
          URL=$(npx vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN")
          echo "prod_url=$URL" >> $GITHUB_OUTPUT

      - name: Output prod URL
        run: |
          echo "Deployed: ${{ steps.vercel.outputs.prod_url }}"
