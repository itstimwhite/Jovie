name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Ensure blocking label exists
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const name  = 'claude:needs-fixes';
            try {
              const { data: existing } = await github.rest.issues.listLabelsForRepo({ owner, repo, per_page: 100 });
              if (!existing.find(l => l.name === name)) {
                await github.rest.issues.createLabel({ owner, repo, name, color: 'B60205', description: 'Claude marked blocking issues to fix before merge' });
              }
            } catch (e) {
              core.warning(`Could not ensure label exists: ${e.message}`);
            }

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage

            Be constructive and helpful in your feedback.

            At the end of your review, output a machine-readable summary block exactly in this format:
            ---SUMMARY---
            blocking: true|false
            reasons:
            - one-line reason 1
            - one-line reason 2
            ---END---

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true

          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality

          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}

          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"

          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

      - name: Parse Claude summary and enforce blocking
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const prNum = context.payload.pull_request.number;

            // Get latest comments to find the summary block
            const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number: prNum, per_page: 100 });
            const body = comments.map(c => c.body || '').reverse().find(t => t.includes('---SUMMARY---')) || '';
            const summary = body.split('---SUMMARY---')[1]?.split('---END---')[0] || '';
            const blockingLine = summary.split('\n').map(s => s.trim()).find(l => l.startsWith('blocking:')) || '';
            const blocking = /blocking:\s*true/i.test(blockingLine);

            if (blocking) {
              // Apply blocking label
              try {
                await github.rest.issues.addLabels({ owner, repo, issue_number: prNum, labels: ['claude:needs-fixes'] });
              } catch (e) {
                core.warning(`Failed to add label: ${e.message}`);
              }
              core.setFailed('Claude review marked this PR as BLOCKING. Address issues before merge.');
            } else {
              // Remove label if present
              try {
                await github.rest.issues.removeLabel({ owner, repo, issue_number: prNum, name: 'claude:needs-fixes' });
              } catch (e) {
                // ignore if not present
              }
              core.info('Claude review not blocking.');
            }
